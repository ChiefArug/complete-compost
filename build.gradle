plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = "${mod_version}"
group = 'chiefarug.mods.complete_compost' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "complete_compost-${minecraft_version}"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    //mappings channel: 'parchment', version: '1.19.2-2022.11.27-1.19.3'
    mappings channel: 'official', version: '1.20'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'complete_compost'

            mods {
                complete_compost {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'complete_compost'

            mods {
                complete_compost {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'complete_compost'

            mods {
                complete_compost {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'complete_compost', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                complete_compost {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { // JEI
        url 'https://maven.blamejared.com/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    String oldMC = minecraft_version
    minecraft_version='1.19.3' // use the 1.19.3 version. this should mean that i dont have to remove my jei code to allow it to compile
//    // compile against the JEI API but do not include it at runtime
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
//    // at runtime, use the full JEI jar for Forge
////    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))
    minecraft_version=oldMC
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "complete_compost",
                "Specification-Vendor"    : "chiefarug",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
        ])
    }
}


// Below is modified from from tinkers build.gradle. Thank you!
def modsTomlSpec = copySpec {
    from(sourceSets.main.resources) {
        include 'META-INF/mods.toml'
        expand 'mod_version': mod_version,
            'minecraft_range': minecraft_range,
            'forge_range': forge_range,
            'fml_range': fml_range
    }
}

def buildPaths = [
    "$rootDir/out/production/resources", //IDEA
    "$rootDir/bin", // Eclipse (No idea if this is correct)
]

tasks.register('replaceResources') {
    // ensure directory exists, first build likes to fail
    new File("${processResources.destinationDir}/META-INF").mkdirs()
    // copy for gradle
    copy {
        outputs.upToDateWhen { false }
        with modsTomlSpec
        into processResources.destinationDir
    }
    // copy for IDEs
    buildPaths.each { path ->
        if (new File(path).exists()) {
            copy {
                outputs.upToDateWhen { false }
                with modsTomlSpec
                into path
            }
        }
    }
}

processResources {
    exclude 'META-INF/mods.toml'
    finalizedBy replaceResources
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
